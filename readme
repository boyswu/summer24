# opencv识别出图书的背脊号

## 为什么使用hsv图像

首先RGB只是用于形成我们想要的颜色，比如说，我们想要黄色，可以通过三原色形成黄色，不管是明黄还是淡黄，只需要用不同比例进行混合就能得到我们想要的颜色，但是在我们进行编程的过程中不能直接用这个比例 ，需要辅助工具，也就是HSV，所以需要将RGB转化成HSV。HSV用更加直观的数据描述我们需要的颜色，H代表色彩，S代表深浅，V代表明暗。HSV在进行色彩分割时作用比较大。通过阈值的划分，颜色能够被区分出来。

## 使用的函数

### 1. cv2.inRange 函数

**写法**:

```
mask = cv2.inRange(hsv, lower_green, upper_green)
```

***参数解释***：

- `hsv`：输入的 HSV 颜色空间的图像。
- lower_green指的是图像中低于这个lower_red的值，图像值变为0
- upper_green指的是图像中高于这个upper_red的值，图像值变为0
- 而在lower_red～upper_red之间的值变成255

**作用**

可以在图像中查找位于指定范围内的像素，该函数返回一个二值图像（只有黑白两种颜色）。

利用cv2.inRange函数设阈值提取特定的颜色区域，去除背景部分。

###2. opencv按位与运算**cv2.bitwise_and 函数**

***什么是按位与操作***

按位与操作是指对两幅图像的像素进行逐位比较，当且仅当两幅图像的对应像素值都为1时，结果图像的对应像素值才为1；否则为0。这种操作常用于图像融合、[掩码](https://so.csdn.net/so/search?q=%E6%8E%A9%E7%A0%81&spm=1001.2101.3001.7020)操作等场景。

**写法**: 

```
green_image = cv2.bitwise_and(src1, src2, dst=None, mask=None)
```

**参数解释**：

- src1：第一幅输入图像 
- src2：第二幅输入图像
- dst：可选参数，输出图像，与输入图像具有相同的尺寸和数据类型
- mask：可选参数，掩码图像，用于指定哪些像素进行按位与操作

**作用**

可以从原始图像中提取出特定的颜色区域。

###github地址

<[boyswu/summer24 (github.com)](https://github.com/boyswu/summer24)>

